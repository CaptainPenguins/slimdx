#summary Notes to facilitate migration from MDX 1.1 and 2.0.
#labels Featured
= Introduction =
This page is intended to be a repository of information regarding migration to the SlimDX API from Microsoft's MDX API. A similar page might eventually exist for MigratingFromXNA, if there is sufficient interest.

Specifically, this page should help call out _intentional_ differences or omissions from the MDX API, which will hopefully prevent us from being inundated with bug reports about "missing method X."

= Math Library Differences =

*Removed non-static methods:*
Most (perhaps eventually all) non-static "operation" methods on math objects have been removed in favor of static methods. This means methods like Matrix::Transpose, Vector3::Dot, Vector3::Cross, et cetera, are all static.

* Removed Zero member from Vector classes: *
Vector2.Zero, Vector3.Zero, and Vector4.Zero have been removed. The same exact functionality can be obtained by using new Vector2(), new Vector3(), or new Vector4().

= Direct3D Differences =

*Namespace reorganization:*
There are three namespaces relevant to D3D: Direct3D, Direct3D9, and Direct3D10. Direct3D holds a handful of things that are shared between the two APIs, and then the versioned namespaces are specific to each version of Direct3D. Applications will typically use the Direct3D namespace and either Direct3D9 or Direct3D10, but not both.

*Manager was renamed to Direct3D:*
The name "Manager" made no sense. It was renamed to Direct3D. The fully qualified name of the class is now SlimDX.Direct3D9.Direct3D.

*Removed CustomVertex:*
These were not deemed to be necessary, and it's preferred that applications define the vertex structures that they are using. These are just endless combinations of pieces of vertices, and really only suitable for FVF based vertices anyway, and those are basically dead.

*Removed TextureLoader:*
This class was extraneous and somewhat confusing. We have dropped it entirely. All texture creation now happens via static members of the classes. So to create a Texture, you always go through the static functions in the Texture class, such as Texture.FromFile. The same goes for volume and cube textures.